#define _WINSOCK_DEPRECATED_NO_WARNINGS 1

// exists on all platforms

#include <stdio.h>

 

// this section will only be compiled on NON Windows platforms

#ifndef _WIN32

#include <sys/types.h>

#include <sys/socket.h>

#include <netinet/in.h>

#include <netinet/ip.h>

#include <string.h>

#include <arpa/inet.h>

 

 

#include <unistd.h>

#include <errno.h>

 

#define closesocket close

typedef int SOCKET;

#else

// on Windows include and link these things

#include<WinSock2.h>

// for uint16_t an so

#include<cstdint>

 

// this is how we can link a library directly from the source code with the VC++ compiler â€“ otherwise got o project settings and link to it explicitly

//#pragma comment(lib,"Ws2_32.lib")

#endif

 

int main() {

       SOCKET s;

       struct sockaddr_in server, client;

       int c, err;
       unsigned int l;

 

// initialize the Windows Sockets LIbrary only when compiled on Windows

#ifdef _WIN32

       WSADATA wsaData;

       if (WSAStartup(MAKEWORD(2, 2), &wsaData) < 0) {

              printf("Error initializing the Windows Sockets LIbrary");

              return -1;

       }

#endif

       s = socket(AF_INET, SOCK_STREAM, 0);

       if (s < 0) {

              printf("Eroare la crearea socketului server\n");

              return 1;

       }

 

       memset(&server, 0, sizeof(server));

       server.sin_port = htons(1234);

       server.sin_family = AF_INET;

       server.sin_addr.s_addr = INADDR_ANY;

 

       if (bind(s, (struct sockaddr *) &server, sizeof(server)) < 0) {

              perror("Bind error:");

              return 1;

       }

 

       listen(s, 5);

 

       l = sizeof(client);

       memset(&client, 0, sizeof(client));

 

       while (1) {

              

              printf("Listening for incomming connections\n");

              c = accept(s, (struct sockaddr *) &client, &l);

              err = errno;

#ifdef _WIN32

              err = WSAGetLastError();

#endif

              if (c < 0) {

                     printf("accept error: %d", err);

                     continue;

              }

              printf("Incomming connected client from: %s:%d\n", inet_ntoa(client.sin_addr), ntohs(client.sin_port));

              // serving the connected client
              char string[15],ch;
              int nr_positions=0,positions[15];
            ///reading character
              if(recv(c, &ch, sizeof(char), 0)!=sizeof(char)){
                printf("error receiving character\n");
              }
                //reading length of string
                int length;
                if(recv(c,&length,sizeof(int), 0)!=sizeof(int)){
                    printf("error receiving length of string\n");
                }
                ///reading string 
                length=ntohs(length);
                for(int i=0;i<length;i++){
                    char aux;
                    recv(c, &aux, sizeof(char),0);
                    string[i]=aux;
                }
                printf("\ncharacter: %c",ch);
                printf("\nstring: %s",string);
                printf("\n positions: ");
                //finding all the positions that have the specified character
                for(int i=0;i<length;i++){
                    if(string[i]==ch){
                        printf("%d ",i);
                        positions[nr_positions]=i;
                        nr_positions++;
                    }
                }
                //sending the nr of positions
                int nrp=nr_positions;
                nr_positions=htons(nr_positions);
                if(send(c, &nr_positions,sizeof(int),0)!=sizeof(int)){
                    printf("error sending nr of positions\n");
                }
                if(send(c, positions,sizeof(int)*nrp,0)!=sizeof(int)*nrp){
                    printf("error sending positions\n");
                }
                printf("\n");
              closesocket(c);

       }

 

       // never reached

       // Release the Windows Sockets Library

#ifdef _WIN32

       WSACleanup();

#endif

}