#define _WINSOCK_DEPRECATED_NO_WARNINGS 1

// exists on all platforms

#include <stdio.h>

 

// this section will only be compiled on NON Windows platforms

#ifndef _WIN32

#include <sys/types.h>

#include <sys/socket.h>

#include <netinet/in.h>

#include <netinet/ip.h>

#include <string.h>

#include <arpa/inet.h>

#include <unistd.h>

#include <errno.h>

 

#define closesocket close

typedef int SOCKET;

#else

// on Windows include and link these things

#include<WinSock2.h>

// for uint16_t an so

#include<cstdint>

 

// this is how we can link a library directly from the source code with the VC++ compiler â€“ otherwise got o project settings and link to it explicitly

//#pragma comment(lib,"Ws2_32.lib")

#endif

 

int main() {

       SOCKET s;

       struct sockaddr_in server, client;

       int c, err;
       unsigned int l;

 

// initialize the Windows Sockets LIbrary only when compiled on Windows

    #ifdef _WIN32
       WSADATA wsaData;
        if (WSAStartup(MAKEWORD(2, 2), &wsaData) < 0) {
            printf("Error initializing the Windows Sockets Library");
            return -1;

       }

#endif

    s = socket(AF_INET, SOCK_STREAM, 0);
    if (s < 0) {
        printf("Eroare la crearea socketului server\n");
        return 1;
    }

    memset(&server, 0, sizeof(server));
    server.sin_port = htons(1234);
    server.sin_family = AF_INET;
    server.sin_addr.s_addr = INADDR_ANY;


    if (bind(s, (struct sockaddr *) &server, sizeof(server)) < 0) {
        perror("Bind error:");
        return 1;
    }

 

    listen(s, 5);

    l = sizeof(client);

    memset(&client, 0, sizeof(client));

 

    while (1) {
        printf("Listening for incoming connections\n");

        c = accept(s, (struct sockaddr *) &client, &l);

        err = errno;

#ifdef _WIN32

    err = WSAGetLastError();

#endif

        if (c < 0) {
            printf("accept error: %d", err);
            continue;
        }

        printf("Incoming connected client from: %s:%d\n", inet_ntoa(client.sin_addr), ntohs(client.sin_port));
        
        // serving the connected client

        int length_string, begin, end;
        char string[25];

        //receiving string length
        if(recv(c,&length_string,sizeof(int),0)!=sizeof(int)){
            printf("error receiving string length\n");
            continue;
        }
        length_string=ntohs(length_string);
        
        //receiving string
        for(int i=0;i<length_string;i++){
            char aux;
            recv(c,&aux,sizeof(char),0);
            string[i]=aux;
        }

        //receiving first number
        if(recv(c,&begin,sizeof(int),0)!=sizeof(int)){
            printf("error receiving first number\n");
            continue;
        }
        begin=ntohs(begin);

        //receiving second number
        if(recv(c,&end,sizeof(int),0)!=sizeof(int)){
            printf("error receiving second number\n");
            continue;
        }
        end=ntohs(end);

        printf("string: %s\nbegin: %d\nend: %d\n", string, begin, end);

        //finding the substring
        char substring[25];
        int length=end-begin+1;
        strncpy(substring,string+begin,length);
        substring[length]=0;
        printf("substring: %s\n",substring);

        //sending the length of the substring
        length=htons(length);
        if(send(c,&length,sizeof(int),0)!=sizeof(int)){
            printf("error sending length of substring\n");
            continue;
        }
        
        //sending the substring
        if(send(c,substring,sizeof(char)*(end-begin+1),0)!=sizeof(char)*(end-begin+1)){
            printf("error sending substring\n");
            continue;
        }


              
        closesocket(c);

    }

 

       // never reached

       // Release the Windows Sockets Library

#ifdef _WIN32

       WSACleanup();

#endif

}